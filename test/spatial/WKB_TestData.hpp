#pragma once
#include <cstdint>

static constexpr const char* wkt_point =
    "POINT(2.0 4.0)";

static constexpr std::uint8_t wkb_point_little_endian[] = {
    /* order = */0x01,
    /* type  = */0x01, 0x00, 0x00, 0x00,
    /* x     = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    /* y     = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40
};

static constexpr std::uint8_t wkb_point_big_endian[] = {
    /* order = */0x00,
    /* type  = */0x00, 0x00, 0x00, 0x01,
    /* x     = */0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* y     = */0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static constexpr const char* wkt_linestring =
    "LINESTRING(30 10, 10 30, 40 40)";

static constexpr std::uint8_t wkb_linestring[] = {
    /* order = */0x01,
    /* type  = */0x02, 0x00, 0x00, 0x00,
    /* count = */0x03, 0x00, 0x00, 0x00,
    /* x[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
    /* y[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    /* x[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    /* y[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
    /* x[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
    /* y[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40
};

static constexpr const char* wkt_polygon =
    "POLYGON((10.689 -25.092, 34.595 -20.170, 38.814 -35.639, 13.502 -39.155, 10.689 -25.092))";

static constexpr std::uint8_t wkb_polygon[] = {
    /* order = */0x01,
    /* type  = */0x03, 0x00, 0x00, 0x00,
    /* count = */0x01, 0x00, 0x00, 0x00,

    // Ring 1
    /* count = */0x05, 0x00, 0x00, 0x00,
    /* x[0]  = */0x54, 0xE3, 0xA5, 0x9B, 0xC4, 0x60, 0x25, 0x40,
    /* y[0]  = */0x64, 0x3B, 0xDF, 0x4F, 0x8D, 0x17, 0x39, 0xC0,
    /* x[1]  = */0x5C, 0x8F, 0xC2, 0xF5, 0x28, 0x4C, 0x41, 0x40,
    /* y[1]  = */0xEC, 0x51, 0xB8, 0x1E, 0x85, 0x2B, 0x34, 0xC0,
    /* x[2]  = */0xD5, 0x78, 0xE9, 0x26, 0x31, 0x68, 0x43, 0x40,
    /* y[2]  = */0x6F, 0x12, 0x83, 0xC0, 0xCA, 0xD1, 0x41, 0xC0,
    /* x[3]  = */0x1B, 0x2F, 0xDD, 0x24, 0x06, 0x01, 0x2B, 0x40,
    /* y[3]  = */0xA4, 0x70, 0x3D, 0x0A, 0xD7, 0x93, 0x43, 0xC0,
    /* x[4]  = */0x54, 0xE3, 0xA5, 0x9B, 0xC4, 0x60, 0x25, 0x40,
    /* y[4]  = */0x64, 0x3B, 0xDF, 0x4F, 0x8D, 0x17, 0x39, 0xC0
};

static constexpr const char* wkt_polygon_with_holes =
    "POLYGON ((0 0, 5 0, 5 5, 0 5, 0 0), (2 2, 2 3, 3 3, 3 2, 2 2))";

static constexpr std::uint8_t wkb_polygon_with_holes[] = {
    /* order = */0x01,
    /* type  = */0x03, 0x00, 0x00, 0x00,
    /* count = */0x02, 0x00, 0x00, 0x00,

    // Ring 1
    /* count = */0x05, 0x00, 0x00, 0x00,
    /* x[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* y[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* x[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40,
    /* y[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* x[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40,
    /* y[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40,
    /* x[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* y[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40,
    /* x[4]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* y[4]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // Ring 2
    /* count = */0x05, 0x00, 0x00, 0x00,
    /* x[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    /* y[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    /* x[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    /* y[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40,
    /* x[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 
    /* y[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40,
    /* x[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40,
    /* y[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    /* x[4]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    /* y[4]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40
};

static constexpr const char* wkt_multipoint =
    "MULTIPOINT(10 40,40 30,20 20,30 10)";

static constexpr std::uint8_t wkb_multipoint[] = {
    /* order = */0x01,
    /* type  = */0x04, 0x00, 0x00, 0x00,
    /* count = */0x04, 0x00, 0x00, 0x00,
    
    // Point 1
    /* order = */0x01,
    /* type  = */0x01, 0x00, 0x00, 0x00,
    /* x     = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    /* y     = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,

    // Point 2
    /* order = */0x01,
    /* type  = */0x01, 0x00, 0x00, 0x00,
    /* x     = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
    /* y     = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,

    // Point 3
    /* order = */0x01,
    /* type  = */0x01, 0x00, 0x00, 0x00,
    /* x     = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40,
    /* y     = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40,

    // Point 4
    /* order = */0x01,
    /* type  = */0x01, 0x00, 0x00, 0x00,
    /* x     = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
    /* y     = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40
};

static constexpr const char* wkt_multilinestring =
    "MULTILINESTRING((10 10,20 20,10 40),(40 40,30 30,40 20,30 10))";

static constexpr std::uint8_t wkb_multilinestring[] = {
    /* order = */0x01,
    /* type  = */0x05, 0x00, 0x00, 0x00,
    /* count = */0x02, 0x00, 0x00, 0x00,

    // LineString 1
    /* order = */0x01,
    /* type  = */0x02, 0x00, 0x00, 0x00,
    /* count = */0x03, 0x00, 0x00, 0x00,
    /* x[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    /* y[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    /* x[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40,
    /* y[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40,
    /* x[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    /* y[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,

    // LineString 2
    /* order = */0x01,
    /* type  = */0x02, 0x00, 0x00, 0x00,
    /* count = */0x04, 0x00, 0x00, 0x00,
    /* x[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
    /* y[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
    /* x[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
    /* y[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
    /* x[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
    /* y[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40,
    /* x[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40,
    /* y[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40
};


static constexpr const char* wkt_multipolygon =
    "MULTIPOLYGON(((0 0, 10 0, 10 10, 0 10, 0 0),(2 2, 2 6, 6 4, 2 2)),((60 60, 60 50, 70 40, 60 60)))";

static constexpr std::uint8_t wkb_multipolygon[] = {
    /* order = */0x01,
    /* type  = */0x06, 0x00, 0x00, 0x00,
    /* count = */0x02, 0x00, 0x00, 0x00,

    // Polygon 1
    /* order = */0x01,
    /* type  = */0x03, 0x00, 0x00, 0x00,
    /* count = */0x02, 0x00, 0x00, 0x00,
    
    // Ring 1-1
    /* count = */0x05, 0x00, 0x00, 0x00,
    /* x[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* y[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* x[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    /* y[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* x[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 
    /* y[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    /* x[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* y[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    /* x[4]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    /* y[4]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // Ring 1-2
    /* count = */0x04, 0x00, 0x00, 0x00,
    /* x[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    /* y[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    /* x[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    /* y[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x40,
    /* x[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x40,
    /* y[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40,
    /* x[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    /* y[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    
    // Polygon 2
    /* order = */0x01,
    /* type  = */0x03, 0x00, 0x00, 0x00,
    /* count = */0x01, 0x00, 0x00, 0x00,

    // Ring 2-1
    /* count = */0x04, 0x00, 0x00, 0x00,
    /* x[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x40,
    /* y[0]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x40,
    /* x[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x40,
    /* y[1]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x40,
    /* x[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x51, 0x40,
    /* y[2]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40,
    /* x[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x40,
    /* y[3]  = */0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x40
};

static constexpr const char* wkt_geometrycollection = R"=(
GEOMETRYCOLLECTION(
  POINT(0 0),
  LINESTRING(1 2,3 4),
  POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 6,6 4,2 2)),
  MULTIPOINT((0 0),(10 0),(10 10),(0 10),(0 0)),
  MULTILINESTRING((0 0,10 0,10 10,0 10,10 20),(2 2,2 6,6 4,20 2)),
  MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0),(2 2,2 6,6 4,2 2)),((60 60,60 50,70 40,60 60)))
)
)=";

static constexpr std::uint8_t wkb_geometrycollection[] = {
    0x01, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
    0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x01,
    0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x01, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
    0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
    0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x24, 0x40, 0x01, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x34, 0x40, 0x01, 0x02, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x06, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x03,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01,
    0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x4e, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x4e, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x4e, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x49, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x51, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x4e, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x4e, 0x40
};
